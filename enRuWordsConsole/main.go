package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/xuri/excelize"
)

// –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
var (
	reader             *bufio.Reader //—Ä–∏–¥–µ—Ä, —á–∏—Ç–∞—é—â–∏–π –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	dictonary          []Word        // –º–∞—Å—Å–∏–≤ —Å –ø–∞—Ä–∞–º–∏ —Å–ª–æ–≤
	rightCnt, wrongCnt int           //—Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
)

// –±–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
type (
	// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –ø–∞—Ä—É —Å–ª–æ–≤: –∞–Ω–≥–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç—ã
	Word struct {
		En string
		Ru string
	}
)

// —Ñ—É–Ω–∫—Ü–∏—è init –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ main. –í –Ω–µ–π –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
func init() {
	// —Ä–∏–¥–µ—Ä, —á–∏—Ç–∞—é—â–∏–π –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	reader = bufio.NewReader(os.Stdin)
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	dictonary = []Word{}
	// —Å–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ rand –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	rand.Seed(time.Now().UnixNano())
}

// —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
func main() {

	// —Å–æ–∑–¥–∞–µ–º —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ excel —Ñ–∞–π–ª–∞
	readDictionary()

	// –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	showStartMessage()

	// —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
	chooseTrainer()

}

// —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func showStartMessage() {
	// –µ—Å–ª–∏ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã `` —Ç–æ —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫. –ò–Ω–∞—á–µ –ø—Ä–∏—â–ª–æ—Å—å –±—ã –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ \n
	fmt.Print(`
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞:
1) –ù–∞–ø–∏—Å–∞—Ç—å —Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
2) –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
3) –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
	`)
}

// —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
func chooseTrainer() {
	// –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	for {
		text, _ := reader.ReadString('\n')
		// —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
		switch strings.TrimSpace(text) {
		case "1":
			startEnToRu()
			return // –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–∑ —Ü–∏–∫–ª–∞
		case "2":
			// —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –≤—ã–±–æ—Ä–∫ 2 –∏–ª–∏ 3 —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–µ–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω, –Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑ —Ü–∏–∫–ª–∞ –Ω–µ –≤—ã–π–¥–µ—Ç. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å return
			startRuToEn()
			break
		case "3":
			startShowTranslate()
			break
		default:
			println("–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3")
		}
	}
}

func startEnToRu() {
	fmt.Println("–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞")
	// –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª. –°–µ–π—á–∞—Å –∏–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Ctrl-C. –ú–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
	for {
		// —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ [0, –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞—Ä—è-1]
		index := rand.Intn(len(dictonary) - 1)
		// –ø–æ –∏–Ω–¥–µ–∫—Å—É –Ω–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ
		word := dictonary[index]
		// –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω
		fmt.Println(word.En)
		// –∂–¥–µ–º –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		text, _ := reader.ReadString('\n')
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
		if strings.Contains(text, word.Ru) {
			// —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
			rightCnt++
			fmt.Println("–ü—Ä–∞–≤–∏–ª—å–Ω–æ üëç")
		} else {
			// —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
			wrongCnt++
			fmt.Println("–ù–µ–≤–µ—Ä–Ω–æ üëé –ü—Ä–∞–≤–∏–ª—å—ã–Ω–π –æ—Ç–≤–µ—Ç:", word.Ru)
		}
		fmt.Println("–°—á–µ—Ç: –ø—Ä–∞–≤–∏–ª—å–Ω–æ:", rightCnt, "/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:", wrongCnt)
		// —Å–µ–∫—É–Ω–¥—ã–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
		time.Sleep(1 * time.Second)
	}
}

func startRuToEn() {
	fmt.Println("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∂–¥–µ—Ç —Å–≤–æ–µ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è. –î–µ–ª–∞–µ—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å 1")
}

func startShowTranslate() {
	fmt.Println("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∂–¥–µ—Ç —Å–≤–æ–µ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è. –î–µ–ª–∞–µ—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å 1")
}

// —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –∏–∑ excel —Ñ–∞–π–ª–∞
func readDictionary() {
	xlsx, err := excelize.OpenFile("./dict.xlsx")
	if err != nil {
		log.Fatalf("Open file: %s", err)
	}

	rows := xlsx.GetRows("Sheet1")
	for i, row := range rows {
		// –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã excel –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ç–∞–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤)
		if i == 0 {
			continue
		}
		// –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –±–æ–ª—à–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, —Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –ø–∞—Ä–∞ —Å–ª–æ–≤
		if len(row) > 1 && len(row) > 1 {
			// –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤–Ω–æ–≤—å—Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Word, —Å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ excel —Å—Ç—Ä–æ–∫–∏
			dictonary = append(dictonary, Word{En: row[0], Ru: row[1]})
		}
	}
}
